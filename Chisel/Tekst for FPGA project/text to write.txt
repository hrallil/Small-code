 ----- Aims/Purpose -----

heap-sort time complexety er n*log(n), hvilket er en velbekendt komplexitet
	Og har en forventet kører tid og forudsigelig. 

kører tid er af asymtotisk komplexitet -> ikke afhænger af data. 
	ikke benytter extra dynamisk data undervejs ved sortering. 

algoritmen giver muliughed for grader af parallelysering under implementationedn af heapefyeren 
	derfor giver det også mulighed undersøge betydningen af paralelysering for resurce forbrug af algoritmen. 



fuck : ->  Hukkommelses forbruget af heap-sort er ikke meget ekstra hukommelse. 



Heapsort can be described with the time complexity of O(n*log(n)),
which is a well understood and predictable complexity.

The algorithm also runs in asymptotic time complexity, 
making the complexity independant of input and other potentially dynamic data.

Heapsort also allows for certain degrees of paralleling in the implimentation, 
allowing for the investigation of the effects paralel programming
 can have to resource and energy consumtion.

Finally, the implimentation of Heapsort does not require more than a constant
 memory complexity, removing any redundant energy use.




 ----- background ----- 

tilføj noget om at heapsort ikke er det eneste. 
noget om andre typer af algoritmer, noget shortest path (måske noget om search vs sort)



In this first study, the focus is on one sorting algorithm, 
later other sorting and seartch alogirthms will be investigated. 





